export default {
  accountPage: {
    accountTitle: 'Account',
    infoHeader: 'Information',
    emailLabel: 'Email',
    cloudSyncHeader: 'Cloud Sync',
    cloudSyncDescription:
      'Real-time cloud synchronization service across devices, which can synchronize all data such as workspaces, conversations, assistants, settings, and plugins.',
    cloudSyncPrice: 'Price is {price} yuan/month',
    statusLabel: 'Status',
    evalLabel: 'Trial',
    evalDaysLeft: 'Remaining trial days: {days}',
    subscribeButton: 'Subscribe',
    subscribedLabel: 'Subscribed',
    validUntil: 'Valid until {date}',
    renewButton: 'Renew',
    modelServicesHeader: 'Model Services',
    modelServicesDescription:
      'Use various advanced models from different service providers in one stop, including deepseek-reasoner, claude-3-5-sonnet, o3-mini, etc., without configuration. The quota is charged as you go and is permanently valid. Charges are deducted according to the official API original price (calculated at USD/CNY=7).',
    modelPricingLink: 'Model Pricing',
    usingDefaultService: 'Using (as global default provider)',
    customService: 'Not used (global custom provider configured)',
    remainingBudget: 'Remaining Budget',
    topupButton: 'Top Up',
    orderHistoryHeader: 'Order History',
    contactDeveloper:
      'If you encounter any abnormalities in your order, please contact the developer, Email:',
    logoutButton: 'Log Out',
    licenseOk: 'Enabled',
    licenseExpired: 'Expired',
    licenseDeactivated: 'Deactivated',
    licenseUnknown: 'Unknown',
    orderId: 'Order ID',
    paymentTime: 'Payment Time',
    orderType: 'Type',
    syncServiceType: 'Cloud Sync Service',
    apiBudgetType: 'Model Quota',
    amount: 'Amount'
  },
  modelPricing: {
    modelPrice: 'Model Price',
    modelPerformance: 'Model Performance',
    modelPerformanceDescription1:
      'Taking gpt-4o as the performance benchmark, compared with it, claude-3-5-sonnet is stronger in code, the o1 series is particularly good at logical reasoning, and gemini-1.5-pro is a cheaper alternative.',
    modelPerformanceDescription2:
      'gpt-4o-mini and gemini-1.5-flash are good choices for low-price models, an order of magnitude lower than the above models, suitable for simple questions and scenarios requiring a lot of output.',
    modelPerformanceDescription3:
      'The first tier of domestic models is Tongyi Qianwen (qwen) and deepseek; deepseek v3 (currently deepseek-chat) is the first domestic model to truly reach the gpt-4o level, and deepseek r1 (currently deepseek-reasoner) is the first reasoning model benchmarked against o1; other domestic models (Wenxin Yiyan, Doubao, Kimi, etc.) are still behind. For the model leaderboard, please refer to',
    modelPerformanceDescription4:
      'In addition, there are several free models (with a price of 0 below), which are mainly experimental models. Free models do not guarantee availability.',
    disclaimer: 'The above views are for reference only, and the model effect is subject to actual use.',
    usageCalculator: 'Usage Calculator',
    usageCalculatorDescription: 'All models are charged at the official API price of each service provider, calculated at the USD/CNY=7 exchange rate.',
    budgetLabel: 'Budget (CNY)',
    modelLabel: 'Model',
    outputLabel: 'Output Words',
    tokenCalculationDescription:
      'Calculated based on 1.4 Chinese characters (new GPT model) or 1 Chinese character (other models) or 1.8 Chinese characters (domestic models) per Token output. The actual ratio fluctuates and is slightly larger than this on average, but input overhead must also be considered.',
    availableModels: 'Available Models',
    getModelPriceFailed: 'Failed to get model price',
    inputPrice: 'Input Price',
    outputPrice: 'Output Price',
    freeModelDisclaimer: 'In addition, there are several free models (with a price of 0 below), which are mainly experimental models. Free models do not guarantee availability.',
    performanceNote: 'The above views are for reference only, and the model effect is subject to actual use.',
    usageDescription: 'All models are charged at the official API price of each service provider, calculated at the USD/CNY=7 exchange rate.',
    tokenOutputNote: 'Calculated based on 1.4 Chinese characters (new GPT model) or 1 Chinese character (other models) or 1.8 Chinese characters (domestic models) per Token output. The actual ratio fluctuates and is slightly larger than this on average, but input overhead must also be considered.',
    currencyCNY: 'ï¿¥',
    currencyUSD: '$',
    unitKTokens: 'K Tokens',
    unitMTokens: 'M Tokens',
    modelName: 'Model'
  },
  pluginsPage: {
    installedPlugins: 'Installed Plugins'
  },
  setProviderPage: {
    providerSet: 'Provider set to: {baseURL}',
    restore: 'Restore',
    providerSetFailed: 'Failed to set provider: incorrect format'
  },
  shortcutKeysPage: {
    keyboardShortcuts: 'Keyboard Shortcuts',
    enableKeyboardShortcuts: 'Enable Keyboard Shortcuts',
    dialogPage: 'Dialog Page',
    scrollUp: 'Scroll Up',
    scrollDown: 'Scroll Down',
    scrollToTop: 'Scroll to Top',
    scrollToBottom: 'Scroll to Bottom',
    switchToPreviousThread: 'Switch to Previous Thread',
    switchToNextThread: 'Switch to Next Thread',
    switchToFirstThread: 'Switch to First Thread',
    switchToLastThread: 'Switch to Last Thread',
    regenerateAssistantMessage: 'Regenerate Assistant Message',
    editUserMessage: 'Edit User Message',
    focusInputBox: 'Focus Input Box',
    dialogList: 'Dialog List',
    newDialog: 'New Dialog',
    editArtifacts: 'Edit Artifacts',
    saveArtifact: 'Save Artifact'
  },
  settingsPage: {
    title: 'Settings',
    customProviderHeader: 'Custom Provider',
    multipleProvidersTip: 'If you want to configure multiple providers at the same time, you can create multiple assistants and configure different providers and models for each assistant',
    shareLinkLabel: 'Share Link',
    shareLinkCaption: 'Used to share your provider settings. Others will automatically apply this setting after opening the link.',
    copyLinkLabel: 'Copy Link',
    noProviderConfigured: 'No custom provider is currently configured, and we will use the model services we provide by default. See',
    accountPage: 'Account',
    pageSuffix: 'Page',
    defaultModelHeader: 'Default Model',
    systemAssistantHeader: 'System Assistant',
    systemAssistantCaption: 'Used to summarize conversation titles and extract Artifacts. If left blank, the default provider settings will be used.',
    featureHeader: 'Features',
    operationHeader: 'Operations',
    autoSummarizeTitle: 'Automatically Summarize Conversation Title',
    autoSummarizeCaption: 'Automatically summarize the title at the end of the first round of conversation',
    messageSelectionMenu: 'Message Selected Text Menu',
    messageSelectionCaption: 'Display operation buttons when message text is selected',
    codePasteOptimize: 'Code Paste Optimization',
    codePasteCaption: 'Automatically wrap the code copied from VSCode with markdown code blocks when pasting',
    quickScrollButton: 'Quick Scroll Button',
    quickScrollCaption: 'Display a quick scroll button in the lower right corner of the conversation. After closing, you can still use keyboard shortcuts to scroll',
    autoFocusInput: 'Automatically Focus Conversation Input Box',
    autoLockBottom: 'Automatically Lock Bottom When Generating',
    messageContentCatalog: 'Message Content Catalog',
    messageContentCatalogCaption: 'Display the catalog next to the message when there is enough space',
    artifactsSettings: 'Artifacts Settings',
    enableArtifacts: 'Enable Artifacts Function',
    autoExtractArtifact: 'Automatically Extract Artifact',
    autoExtractArtifactCaption: 'Automatically extract Artifact from assistant replies',
    reserveOriginalArtifact: 'Reserve Original Text When Extracting',
    autoNameArtifact: 'Automatically Name Artifact by Default',
    sendKeyShortcut: 'Send Message Shortcut Key',
    keyboardShortcuts: 'Keyboard Shortcuts',
    uiHeader: 'UI',
    appearance: 'Appearance',
    themeColor: 'Theme Color',
    userAvatar: 'User Avatar',
    commonModels: 'Common Models',
    commonModelsCaption: 'Used to quickly switch models in conversations.',
    getModelList: 'Get Model List',
    showWarnings: 'Show Warnings',
    showWarningsCaption: 'Show warning messages in the response',
    markdownRendering: 'Markdown Rendering',
    theme: 'Theme',
    codeTheme: 'Code Theme',
    disableMermaid: 'Disable Mermaid',
    codeAutoFoldThreshold: 'Code Auto Fold Threshold',
    codeAutoFoldThresholdCaption: 'Automatically fold code blocks after the number of lines exceeds this number. Do not fold by default',
    dataHeader: 'Data',
    userData: 'User Data',
    export: 'Export',
    import: 'Import',
    restoreDefaultSettings: 'Restore Default Settings',
    restoreSettingsConfirmation: 'Are you sure you want to restore all settings to default?',
    followSystem: 'Follow System',
    light: 'Light',
    dark: 'Dark',
    selectCommonModels: 'Select Common Models',
    getModelListFailed: 'Failed to get model list',
    exportFailed: 'Export Failed',
    auto: 'Auto',
    language: 'Language'
  },
  errorNotFound: {
    message: 'There\'s nothing here...'
  },
  assistantsPage: {
    globalAssistant: 'Global Assistant'
  },
  workspacePage: {
    closeArtifact: 'Close',
    closeAllArtifacts: 'Close All Artifacts',
    workspaceHome: 'Workspace Home',
    workspaceSettings: 'Workspace Settings',
    assistants: 'Assistants',
    artifactsGuide: 'Refer to',
    artifactsGuideLink: 'Artifacts User Guide',
    create: 'Create',
    selectFile: 'File',
    dialogs: 'Dialogs',
    createArtifact: 'Create Artifact',
    name: 'Name',
    nonTextFile: 'Non-text file: {name}'
  },
  mainLayout: {
    workspace: 'Workspace',
    assistants: 'Assistants',
    plugins: 'Plugins',
    settings: 'Settings',
    usageGuide: 'Usage Guide',
    currentVersion: 'Current Version',
    changeLog: 'Change Log'
  }
}
