name: 'Build Tauri'

on:
  release:
    types: [published]


jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'pnpm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: pnpm install

      - name: setup .env
        run: cp .env.app .env.local

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

        with:
          releaseId: ${{ github.event.release.id }}
          args: ${{ matrix.args }}

      - name: Update latest.json with linux-deb platform
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const assets = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              per_page: 50
            });

            let latestJsonAsset = assets.data.find(asset => asset.name === 'latest.json');
            if (!latestJsonAsset) {
              console.log('latest.json not found in release assets');
              return;
            }

            console.log('Downloading latest.json...');
            const latestJsonResponse = await fetch(latestJsonAsset.browser_download_url);
            const latestJson = await latestJsonResponse.json();

            console.log('Reading Debian package signature...');
            const debSigPath = 'src-tauri/target/release/bundle/deb/AI as Workspace_' + latestJson.version + '_amd64.deb.sig';
            const debSignature = fs.readFileSync(debSigPath, 'utf8');

            const linuxAppImageUrl = latestJson.platforms['linux-x86_64']?.url;
            if (!linuxAppImageUrl) {
              console.error('Linux AppImage URL not found in latest.json');
              return;
            }
            const linuxDebUrl = linuxAppImageUrl.replace('.AppImage', '.deb');

            console.log('Adding linux-deb platform to latest.json...');
            latestJson.platforms['linux-deb'] = {
              signature: debSignature,
              url: linuxDebUrl
            };

            const tempLatestJsonPath = path.join('./', 'latest.json');
            fs.writeFileSync(tempLatestJsonPath, JSON.stringify(latestJson, null, 2));

            console.log('Deleting original latest.json asset...');
            await github.rest.repos.deleteReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              asset_id: latestJsonAsset.id
            });

            console.log('Uploading updated latest.json...');
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              name: 'latest.json',
              data: fs.readFileSync(tempLatestJsonPath)
            });

            console.log('latest.json updated successfully with linux-deb platform');
