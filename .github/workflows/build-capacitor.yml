name: Build Android
run-name: Creating Production Ready Android App ðŸš€
on:
  release:
    types: [published]

jobs:
  build:
    name: Build APK
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "21"

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Setup .env
        run: cp .env.app .env.local

      - name: Build frontend
        run: pnpm build

      - name: Add android folder if not present
        run: if [ ! -d "./android" ]; then npx cap add android; fi

      - name: Capacitor sync
        run: npx cap sync

      - name: Extract Android signing key from env
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 -d > android/release.decrypted.jks

      - name: Set gradlew permissions
        run: chmod +x ./android/gradlew

      - name: Build Release APK
        working-directory: ./android
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=${{ github.workspace }}/android/release.decrypted.jks \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEYSTORE_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEYSTORE_ALIAS_PASSWORD }}

      - name: Zip spa bundle
        working-directory: ./dist/spa
        run: zip -qq -r ../../spa.zip .

      - name: Upload an Asset in GitHub Release
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const fs = require('fs').promises;
            await github.rest.repos.uploadReleaseAsset({
              name: 'AIaW_${{ github.ref_name }}.apk',
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              data: await fs.readFile('./android/app/build/outputs/apk/release/app-release.apk')
            });
            await github.rest.repos.uploadReleaseAsset({
              name: 'spa_bundle_${{ github.ref_name }}.zip',
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              data: await fs.readFile('./spa.zip')
            });
            await github.rest.repos.uploadReleaseAsset({
              name: 'version.json',
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              data: await fs.readFile('./src/version.json')
            });
